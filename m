Return-Path: <nouveau-bounces@lists.freedesktop.org>
X-Original-To: lists+nouveau@lfdr.de
Delivered-To: lists+nouveau@lfdr.de
Received: from gabe.freedesktop.org (gabe.freedesktop.org [IPv6:2610:10:20:722:a800:ff:fe36:1795])
	by mail.lfdr.de (Postfix) with ESMTPS id 53011434E1
	for <lists+nouveau@lfdr.de>; Thu, 13 Jun 2019 11:44:24 +0200 (CEST)
Received: from gabe.freedesktop.org (localhost [127.0.0.1])
	by gabe.freedesktop.org (Postfix) with ESMTP id C9E598989F;
	Thu, 13 Jun 2019 09:44:22 +0000 (UTC)
X-Original-To: nouveau@lists.freedesktop.org
Delivered-To: nouveau@lists.freedesktop.org
Received: from bombadil.infradead.org (bombadil.infradead.org
 [IPv6:2607:7c80:54:e::133])
 by gabe.freedesktop.org (Postfix) with ESMTPS id A68168989E;
 Thu, 13 Jun 2019 09:44:21 +0000 (UTC)
Received: from mpp-cp1-natpool-1-198.ethz.ch ([82.130.71.198] helo=localhost)
 by bombadil.infradead.org with esmtpsa (Exim 4.92 #3 (Red Hat Linux))
 id 1hbMHK-0001uV-3d; Thu, 13 Jun 2019 09:44:18 +0000
From: Christoph Hellwig <hch@lst.de>
To: Dan Williams <dan.j.williams@intel.com>,
 =?UTF-8?q?J=C3=A9r=C3=B4me=20Glisse?= <jglisse@redhat.com>,
 Jason Gunthorpe <jgg@mellanox.com>, Ben Skeggs <bskeggs@redhat.com>
Date: Thu, 13 Jun 2019 11:43:20 +0200
Message-Id: <20190613094326.24093-18-hch@lst.de>
X-Mailer: git-send-email 2.20.1
In-Reply-To: <20190613094326.24093-1-hch@lst.de>
References: <20190613094326.24093-1-hch@lst.de>
MIME-Version: 1.0
X-SRS-Rewrite: SMTP reverse-path rewritten from <hch@infradead.org> by
 bombadil.infradead.org. See http://www.infradead.org/rpr.html
X-Mailman-Original-DKIM-Signature: v=1; a=rsa-sha256; q=dns/txt;
 c=relaxed/relaxed; 
 d=infradead.org; s=bombadil.20170209; h=Content-Transfer-Encoding:
 MIME-Version:References:In-Reply-To:Message-Id:Date:Subject:Cc:To:From:Sender
 :Reply-To:Content-Type:Content-ID:Content-Description:Resent-Date:Resent-From
 :Resent-Sender:Resent-To:Resent-Cc:Resent-Message-ID:List-Id:List-Help:
 List-Unsubscribe:List-Subscribe:List-Post:List-Owner:List-Archive;
 bh=bHeNfTwD4XAIS0eLeLiZcWglvOw+19Z/Sq7aWx7Y048=; b=udKbgJZRJ+SciwR1Pd2q2Ka65G
 9Skj/f/gJTQ+G9l3fpEf5dUSUFcYh4QSwiDYZHL2RgWWhVw1acSH3tCYUNAdEMgWjvKo9XmZJKowh
 ynPRiFcvwNh6m1Qke2wr57eEX6NYF82GOwMdjZuINowQ/aiErhvPQvL+uj9CEzkporjQHs5Iji2lr
 OdhXwDyPRQt5lyuEIA33C7LIhZVxwjAv+lbGWP3qPVg3XyAWri6plie5WWu1n/mj/M+A76ZBdXqMx
 zpQCcIA67an3Shb/STrkhn7Fz+6a7GXN3TcVMw1u7P1mN1h2pWvHraQmJn4sm19vwHc16182jf4WO
 A19H4NrA==;
Subject: [Nouveau] [PATCH 17/22] mm: remove hmm_devmem_add
X-BeenThere: nouveau@lists.freedesktop.org
X-Mailman-Version: 2.1.23
Precedence: list
List-Id: Nouveau development list <nouveau.lists.freedesktop.org>
List-Unsubscribe: <https://lists.freedesktop.org/mailman/options/nouveau>,
 <mailto:nouveau-request@lists.freedesktop.org?subject=unsubscribe>
List-Archive: <https://lists.freedesktop.org/archives/nouveau>
List-Post: <mailto:nouveau@lists.freedesktop.org>
List-Help: <mailto:nouveau-request@lists.freedesktop.org?subject=help>
List-Subscribe: <https://lists.freedesktop.org/mailman/listinfo/nouveau>,
 <mailto:nouveau-request@lists.freedesktop.org?subject=subscribe>
Cc: linux-nvdimm@lists.01.org, linux-pci@vger.kernel.org,
 linux-kernel@vger.kernel.org, dri-devel@lists.freedesktop.org,
 linux-mm@kvack.org, nouveau@lists.freedesktop.org
Content-Type: text/plain; charset="utf-8"
Content-Transfer-Encoding: base64
Errors-To: nouveau-bounces@lists.freedesktop.org
Sender: "Nouveau" <nouveau-bounces@lists.freedesktop.org>

VGhlcmUgaXNuJ3QgcmVhbGx5IG11Y2ggdmFsdWUgYWRkIGluIHRoZSBobW1fZGV2bWVtX2FkZCB3
cmFwcGVyLiAgSnVzdApmYWN0b3Igb3V0IGEgbGl0dGxlIGhlbHBlciB0byBmaW5kIHRoZSByZXNv
dXJjZSwgYW5kIG90aGVyd2lzZSBsZXQgdGhlCmRyaXZlciBpbXBsZW1lbnQgdGhlIGRldl9wYWdl
bWFwX29wcyBkaXJlY3RseS4KClNpZ25lZC1vZmYtYnk6IENocmlzdG9waCBIZWxsd2lnIDxoY2hA
bHN0LmRlPgotLS0KIERvY3VtZW50YXRpb24vdm0vaG1tLnJzdCB8ICAyNiAtLS0tLS0tLQogaW5j
bHVkZS9saW51eC9obW0uaCAgICAgIHwgMTI5IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLQogbW0vaG1tLmMgICAgICAgICAgICAgICAgIHwgMTE1IC0tLS0tLS0tLS0tLS0t
LS0tLS0tLS0tLS0tLS0tLS0tLS0KIDMgZmlsZXMgY2hhbmdlZCwgMjcwIGRlbGV0aW9ucygtKQoK
ZGlmZiAtLWdpdCBhL0RvY3VtZW50YXRpb24vdm0vaG1tLnJzdCBiL0RvY3VtZW50YXRpb24vdm0v
aG1tLnJzdAppbmRleCA3YjZlZWRhNWE3YzAuLmIxYzk2MGZlMjQ2ZCAxMDA2NDQKLS0tIGEvRG9j
dW1lbnRhdGlvbi92bS9obW0ucnN0CisrKyBiL0RvY3VtZW50YXRpb24vdm0vaG1tLnJzdApAQCAt
MzM2LDMyICszMzYsNiBAQCBkaXJlY3RseSB1c2luZyBzdHJ1Y3QgcGFnZSBmb3IgZGV2aWNlIG1l
bW9yeSB3aGljaCBsZWZ0IG1vc3Qga2VybmVsIGNvZGUgcGF0aHMKIHVuYXdhcmUgb2YgdGhlIGRp
ZmZlcmVuY2UuIFdlIG9ubHkgbmVlZCB0byBtYWtlIHN1cmUgdGhhdCBubyBvbmUgZXZlciB0cmll
cyB0bwogbWFwIHRob3NlIHBhZ2VzIGZyb20gdGhlIENQVSBzaWRlLgogCi1ITU0gcHJvdmlkZXMg
YSBzZXQgb2YgaGVscGVycyB0byByZWdpc3RlciBhbmQgaG90cGx1ZyBkZXZpY2UgbWVtb3J5IGFz
IGEgbmV3Ci1yZWdpb24gbmVlZGluZyBhIHN0cnVjdCBwYWdlLiBUaGlzIGlzIG9mZmVyZWQgdGhy
b3VnaCBhIHZlcnkgc2ltcGxlIEFQSTo6Ci0KLSBzdHJ1Y3QgaG1tX2Rldm1lbSAqaG1tX2Rldm1l
bV9hZGQoY29uc3Qgc3RydWN0IGhtbV9kZXZtZW1fb3BzICpvcHMsCi0gICAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgIHN0cnVjdCBkZXZpY2UgKmRldmljZSwKLSAgICAgICAgICAgICAg
ICAgICAgICAgICAgICAgICAgICAgdW5zaWduZWQgbG9uZyBzaXplKTsKLSB2b2lkIGhtbV9kZXZt
ZW1fcmVtb3ZlKHN0cnVjdCBobW1fZGV2bWVtICpkZXZtZW0pOwotCi1UaGUgaG1tX2Rldm1lbV9v
cHMgaXMgd2hlcmUgbW9zdCBvZiB0aGUgaW1wb3J0YW50IHRoaW5ncyBhcmU6OgotCi0gc3RydWN0
IGhtbV9kZXZtZW1fb3BzIHsKLSAgICAgdm9pZCAoKmZyZWUpKHN0cnVjdCBobW1fZGV2bWVtICpk
ZXZtZW0sIHN0cnVjdCBwYWdlICpwYWdlKTsKLSAgICAgdm1fZmF1bHRfdCAoKmZhdWx0KShzdHJ1
Y3QgaG1tX2Rldm1lbSAqZGV2bWVtLAotICAgICAgICAgICAgICAgICAgc3RydWN0IHZtX2FyZWFf
c3RydWN0ICp2bWEsCi0gICAgICAgICAgICAgICAgICB1bnNpZ25lZCBsb25nIGFkZHIsCi0gICAg
ICAgICAgICAgICAgICBzdHJ1Y3QgcGFnZSAqcGFnZSwKLSAgICAgICAgICAgICAgICAgIHVuc2ln
bmVkIGZsYWdzLAotICAgICAgICAgICAgICAgICAgcG1kX3QgKnBtZHApOwotIH07Ci0KLVRoZSBm
aXJzdCBjYWxsYmFjayAoZnJlZSgpKSBoYXBwZW5zIHdoZW4gdGhlIGxhc3QgcmVmZXJlbmNlIG9u
IGEgZGV2aWNlIHBhZ2UgaXMKLWRyb3BwZWQuIFRoaXMgbWVhbnMgdGhlIGRldmljZSBwYWdlIGlz
IG5vdyBmcmVlIGFuZCBubyBsb25nZXIgdXNlZCBieSBhbnlvbmUuCi1UaGUgc2Vjb25kIGNhbGxi
YWNrIGhhcHBlbnMgd2hlbmV2ZXIgdGhlIENQVSB0cmllcyB0byBhY2Nlc3MgYSBkZXZpY2UgcGFn
ZQotd2hpY2ggaXQgY2Fubm90IGRvLiBUaGlzIHNlY29uZCBjYWxsYmFjayBtdXN0IHRyaWdnZXIg
YSBtaWdyYXRpb24gYmFjayB0bwotc3lzdGVtIG1lbW9yeS4KLQogCiBNaWdyYXRpb24gdG8gYW5k
IGZyb20gZGV2aWNlIG1lbW9yeQogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0K
ZGlmZiAtLWdpdCBhL2luY2x1ZGUvbGludXgvaG1tLmggYi9pbmNsdWRlL2xpbnV4L2htbS5oCmlu
ZGV4IDBlNjFkODMwYjBhOS4uMTMxNTJhYjUwNGVjIDEwMDY0NAotLS0gYS9pbmNsdWRlL2xpbnV4
L2htbS5oCisrKyBiL2luY2x1ZGUvbGludXgvaG1tLmgKQEAgLTU1MSwxMzUgKzU1MSw2IEBAIHN0
YXRpYyBpbmxpbmUgdm9pZCBobW1fbW1faW5pdChzdHJ1Y3QgbW1fc3RydWN0ICptbSkge30KICNl
bmRpZiAvKiBJU19FTkFCTEVEKENPTkZJR19ITU1fTUlSUk9SKSAqLwogCiAjaWYgSVNfRU5BQkxF
RChDT05GSUdfREVWSUNFX1BSSVZBVEUpIHx8ICBJU19FTkFCTEVEKENPTkZJR19ERVZJQ0VfUFVC
TElDKQotc3RydWN0IGhtbV9kZXZtZW07Ci0KLS8qCi0gKiBzdHJ1Y3QgaG1tX2Rldm1lbV9vcHMg
LSBjYWxsYmFjayBmb3IgWk9ORV9ERVZJQ0UgbWVtb3J5IGV2ZW50cwotICoKLSAqIEBmcmVlOiBj
YWxsIHdoZW4gcmVmY291bnQgb24gcGFnZSByZWFjaCAxIGFuZCB0aHVzIGlzIG5vIGxvbmdlciB1
c2UKLSAqIEBmYXVsdDogY2FsbCB3aGVuIHRoZXJlIGlzIGEgcGFnZSBmYXVsdCB0byB1bmFkZHJl
c3NhYmxlIG1lbW9yeQotICoKLSAqIEJvdGggY2FsbGJhY2sgaGFwcGVucyBmcm9tIHBhZ2VfZnJl
ZSgpIGFuZCBwYWdlX2ZhdWx0KCkgY2FsbGJhY2sgb2Ygc3RydWN0Ci0gKiBkZXZfcGFnZW1hcCBy
ZXNwZWN0aXZlbHkuIFNlZSBpbmNsdWRlL2xpbnV4L21lbXJlbWFwLmggZm9yIG1vcmUgZGV0YWls
cyBvbgotICogdGhvc2UuCi0gKgotICogVGhlIGhtbV9kZXZtZW1fb3BzIGNhbGxiYWNrIGFyZSBq
dXN0IGhlcmUgdG8gcHJvdmlkZSBhIGNvaGVyZW50IGFuZAotICogdW5pcSBBUEkgdG8gZGV2aWNl
IGRyaXZlciBhbmQgZGV2aWNlIGRyaXZlciBzaG91bGQgbm90IHJlZ2lzdGVyIHRoZWlyCi0gKiBv
d24gcGFnZV9mcmVlKCkgb3IgcGFnZV9mYXVsdCgpIGJ1dCByZWx5IG9uIHRoZSBobW1fZGV2bWVt
X29wcyBjYWxsLQotICogYmFjay4KLSAqLwotc3RydWN0IGhtbV9kZXZtZW1fb3BzIHsKLQkvKgot
CSAqIGZyZWUoKSAtIGZyZWUgYSBkZXZpY2UgcGFnZQotCSAqIEBkZXZtZW06IGRldmljZSBtZW1v
cnkgc3RydWN0dXJlIChzZWUgc3RydWN0IGhtbV9kZXZtZW0pCi0JICogQHBhZ2U6IHBvaW50ZXIg
dG8gc3RydWN0IHBhZ2UgYmVpbmcgZnJlZWQKLQkgKgotCSAqIENhbGwgYmFjayBvY2N1cnMgd2hl
bmV2ZXIgYSBkZXZpY2UgcGFnZSByZWZjb3VudCByZWFjaCAxIHdoaWNoCi0JICogbWVhbnMgdGhh
dCBubyBvbmUgaXMgaG9sZGluZyBhbnkgcmVmZXJlbmNlIG9uIHRoZSBwYWdlIGFueW1vcmUKLQkg
KiAoWk9ORV9ERVZJQ0UgcGFnZSBoYXZlIGFuIGVsZXZhdGVkIHJlZmNvdW50IG9mIDEgYXMgZGVm
YXVsdCBzbwotCSAqIHRoYXQgdGhleSBhcmUgbm90IHJlbGVhc2UgdG8gdGhlIGdlbmVyYWwgcGFn
ZSBhbGxvY2F0b3IpLgotCSAqCi0JICogTm90ZSB0aGF0IGNhbGxiYWNrIGhhcyBleGNsdXNpdmUg
b3duZXJzaGlwIG9mIHRoZSBwYWdlIChhcyBubwotCSAqIG9uZSBpcyBob2xkaW5nIGFueSByZWZl
cmVuY2UpLgotCSAqLwotCXZvaWQgKCpmcmVlKShzdHJ1Y3QgaG1tX2Rldm1lbSAqZGV2bWVtLCBz
dHJ1Y3QgcGFnZSAqcGFnZSk7Ci0JLyoKLQkgKiBmYXVsdCgpIC0gQ1BVIHBhZ2UgZmF1bHQgb3Ig
Z2V0IHVzZXIgcGFnZSAoR1VQKQotCSAqIEBkZXZtZW06IGRldmljZSBtZW1vcnkgc3RydWN0dXJl
IChzZWUgc3RydWN0IGhtbV9kZXZtZW0pCi0JICogQHZtYTogdmlydHVhbCBtZW1vcnkgYXJlYSBj
b250YWluaW5nIHRoZSB2aXJ0dWFsIGFkZHJlc3MKLQkgKiBAYWRkcjogdmlydHVhbCBhZGRyZXNz
IHRoYXQgZmF1bHRlZCBvciBmb3Igd2hpY2ggdGhlcmUgaXMgYSBHVVAKLQkgKiBAcGFnZTogcG9p
bnRlciB0byBzdHJ1Y3QgcGFnZSBiYWNraW5nIHZpcnR1YWwgYWRkcmVzcyAodW5yZWxpYWJsZSkK
LQkgKiBAZmxhZ3M6IEZBVUxUX0ZMQUdfKiAoc2VlIGluY2x1ZGUvbGludXgvbW0uaCkKLQkgKiBA
cG1kcDogcGFnZSBtaWRkbGUgZGlyZWN0b3J5Ci0JICogUmV0dXJuOiBWTV9GQVVMVF9NSU5PUi9N
QUpPUiBvbiBzdWNjZXNzIG9yIG9uZSBvZiBWTV9GQVVMVF9FUlJPUgotCSAqICAgb24gZXJyb3IK
LQkgKgotCSAqIFRoZSBjYWxsYmFjayBvY2N1cnMgd2hlbmV2ZXIgdGhlcmUgaXMgYSBDUFUgcGFn
ZSBmYXVsdCBvciBHVVAgb24gYQotCSAqIHZpcnR1YWwgYWRkcmVzcy4gVGhpcyBtZWFucyB0aGF0
IHRoZSBkZXZpY2UgZHJpdmVyIG11c3QgbWlncmF0ZSB0aGUKLQkgKiBwYWdlIGJhY2sgdG8gcmVn
dWxhciBtZW1vcnkgKENQVSBhY2Nlc3NpYmxlKS4KLQkgKgotCSAqIFRoZSBkZXZpY2UgZHJpdmVy
IGlzIGZyZWUgdG8gbWlncmF0ZSBtb3JlIHRoYW4gb25lIHBhZ2UgZnJvbSB0aGUKLQkgKiBmYXVs
dCgpIGNhbGxiYWNrIGFzIGFuIG9wdGltaXphdGlvbi4gSG93ZXZlciBpZiB0aGUgZGV2aWNlIGRl
Y2lkZXMKLQkgKiB0byBtaWdyYXRlIG1vcmUgdGhhbiBvbmUgcGFnZSBpdCBtdXN0IGFsd2F5cyBw
cmlvdGlyaXplIHRoZSBmYXVsdGluZwotCSAqIGFkZHJlc3Mgb3ZlciB0aGUgb3RoZXJzLgotCSAq
Ci0JICogVGhlIHN0cnVjdCBwYWdlIHBvaW50ZXIgaXMgb25seSBnaXZlbiBhcyBhIGhpbnQgdG8g
YWxsb3cgcXVpY2sKLQkgKiBsb29rdXAgb2YgaW50ZXJuYWwgZGV2aWNlIGRyaXZlciBkYXRhLiBB
IGNvbmN1cnJlbnQgbWlncmF0aW9uCi0JICogbWlnaHQgaGF2ZSBhbHJlYWR5IGZyZWVkIHRoYXQg
cGFnZSBhbmQgdGhlIHZpcnR1YWwgYWRkcmVzcyBtaWdodAotCSAqIG5vIGxvbmdlciBiZSBiYWNr
ZWQgYnkgaXQuIFNvIGl0IHNob3VsZCBub3QgYmUgbW9kaWZpZWQgYnkgdGhlCi0JICogY2FsbGJh
Y2suCi0JICoKLQkgKiBOb3RlIHRoYXQgbW1hcCBzZW1hcGhvcmUgaXMgaGVsZCBpbiByZWFkIG1v
ZGUgYXQgbGVhc3Qgd2hlbiB0aGlzCi0JICogY2FsbGJhY2sgb2NjdXJzLCBoZW5jZSB0aGUgdm1h
IGlzIHZhbGlkIHVwb24gY2FsbGJhY2sgZW50cnkuCi0JICovCi0Jdm1fZmF1bHRfdCAoKmZhdWx0
KShzdHJ1Y3QgaG1tX2Rldm1lbSAqZGV2bWVtLAotCQkgICAgIHN0cnVjdCB2bV9hcmVhX3N0cnVj
dCAqdm1hLAotCQkgICAgIHVuc2lnbmVkIGxvbmcgYWRkciwKLQkJICAgICBjb25zdCBzdHJ1Y3Qg
cGFnZSAqcGFnZSwKLQkJICAgICB1bnNpZ25lZCBpbnQgZmxhZ3MsCi0JCSAgICAgcG1kX3QgKnBt
ZHApOwotfTsKLQotLyoKLSAqIHN0cnVjdCBobW1fZGV2bWVtIC0gdHJhY2sgZGV2aWNlIG1lbW9y
eQotICoKLSAqIEBjb21wbGV0aW9uOiBjb21wbGV0aW9uIG9iamVjdCBmb3IgZGV2aWNlIG1lbW9y
eQotICogQHBmbl9maXJzdDogZmlyc3QgcGZuIGZvciB0aGlzIHJlc291cmNlIChzZXQgYnkgaG1t
X2Rldm1lbV9hZGQoKSkKLSAqIEBwZm5fbGFzdDogbGFzdCBwZm4gZm9yIHRoaXMgcmVzb3VyY2Ug
KHNldCBieSBobW1fZGV2bWVtX2FkZCgpKQotICogQHJlc291cmNlOiBJTyByZXNvdXJjZSByZXNl
cnZlZCBmb3IgdGhpcyBjaHVuayBvZiBtZW1vcnkKLSAqIEBwYWdlbWFwOiBkZXZpY2UgcGFnZSBt
YXAgZm9yIHRoYXQgY2h1bmsKLSAqIEBkZXZpY2U6IGRldmljZSB0byBiaW5kIHJlc291cmNlIHRv
Ci0gKiBAb3BzOiBtZW1vcnkgb3BlcmF0aW9ucyBjYWxsYmFjawotICogQHJlZjogcGVyIENQVSBy
ZWZjb3VudAotICogQHBhZ2VfZmF1bHQ6IGNhbGxiYWNrIHdoZW4gQ1BVIGZhdWx0IG9uIGFuIHVu
YWRkcmVzc2FibGUgZGV2aWNlIHBhZ2UKLSAqCi0gKiBUaGlzIGlzIGEgaGVscGVyIHN0cnVjdHVy
ZSBmb3IgZGV2aWNlIGRyaXZlcnMgdGhhdCBkbyBub3Qgd2lzaCB0byBpbXBsZW1lbnQKLSAqIHRo
ZSBnb3J5IGRldGFpbHMgcmVsYXRlZCB0byBob3RwbHVnZ2luZyBuZXcgbWVtb3kgYW5kIGFsbG9j
YXRpbmcgc3RydWN0Ci0gKiBwYWdlcy4KLSAqCi0gKiBEZXZpY2UgZHJpdmVycyBjYW4gZGlyZWN0
bHkgdXNlIFpPTkVfREVWSUNFIG1lbW9yeSBvbiB0aGVpciBvd24gaWYgdGhleQotICogd2lzaCB0
byBkbyBzby4KLSAqCi0gKiBUaGUgcGFnZV9mYXVsdCgpIGNhbGxiYWNrIG11c3QgbWlncmF0ZSBw
YWdlIGJhY2ssIGZyb20gZGV2aWNlIG1lbW9yeSB0bwotICogc3lzdGVtIG1lbW9yeSwgc28gdGhh
dCB0aGUgQ1BVIGNhbiBhY2Nlc3MgaXQuIFRoaXMgbWlnaHQgZmFpbCBmb3IgdmFyaW91cwotICog
cmVhc29ucyAoZGV2aWNlIGlzc3VlcywgIGRldmljZSBoYXZlIGJlZW4gdW5wbHVnZ2VkLCAuLi4p
LiBXaGVuIHN1Y2ggZXJyb3IKLSAqIGNvbmRpdGlvbnMgaGFwcGVuLCB0aGUgcGFnZV9mYXVsdCgp
IGNhbGxiYWNrIG11c3QgcmV0dXJuIFZNX0ZBVUxUX1NJR0JVUyBhbmQKLSAqIHNldCB0aGUgQ1BV
IHBhZ2UgdGFibGUgZW50cnkgdG8gInBvaXNvbmVkIi4KLSAqCi0gKiBOb3RlIHRoYXQgYmVjYXVz
ZSBtZW1vcnkgY2dyb3VwIGNoYXJnZXMgYXJlIHRyYW5zZmVycmVkIHRvIHRoZSBkZXZpY2UgbWVt
b3J5LAotICogdGhpcyBzaG91bGQgbmV2ZXIgZmFpbCBkdWUgdG8gbWVtb3J5IHJlc3RyaWN0aW9u
cy4gSG93ZXZlciwgYWxsb2NhdGlvbgotICogb2YgYSByZWd1bGFyIHN5c3RlbSBwYWdlIG1pZ2h0
IHN0aWxsIGZhaWwgYmVjYXVzZSB3ZSBhcmUgb3V0IG9mIG1lbW9yeS4gSWYKLSAqIHRoYXQgaGFw
cGVucywgdGhlIHBhZ2VfZmF1bHQoKSBjYWxsYmFjayBtdXN0IHJldHVybiBWTV9GQVVMVF9PT00u
Ci0gKgotICogVGhlIHBhZ2VfZmF1bHQoKSBjYWxsYmFjayBjYW4gYWxzbyB0cnkgdG8gbWlncmF0
ZSBiYWNrIG11bHRpcGxlIHBhZ2VzIGluIG9uZQotICogY2h1bmssIGFzIGFuIG9wdGltaXphdGlv
bi4gSXQgbXVzdCwgaG93ZXZlciwgcHJpb3JpdGl6ZSB0aGUgZmF1bHRpbmcgYWRkcmVzcwotICog
b3ZlciBhbGwgdGhlIG90aGVycy4KLSAqLwotCi1zdHJ1Y3QgaG1tX2Rldm1lbSB7Ci0Jc3RydWN0
IGNvbXBsZXRpb24JCWNvbXBsZXRpb247Ci0JdW5zaWduZWQgbG9uZwkJCXBmbl9maXJzdDsKLQl1
bnNpZ25lZCBsb25nCQkJcGZuX2xhc3Q7Ci0Jc3RydWN0IHJlc291cmNlCQkJKnJlc291cmNlOwot
CXN0cnVjdCBkZXZpY2UJCQkqZGV2aWNlOwotCXN0cnVjdCBkZXZfcGFnZW1hcAkJcGFnZW1hcDsK
LQljb25zdCBzdHJ1Y3QgaG1tX2Rldm1lbV9vcHMJKm9wczsKLQlzdHJ1Y3QgcGVyY3B1X3JlZgkJ
cmVmOwotfTsKLQotLyoKLSAqIFRvIGFkZCAoaG90cGx1ZykgZGV2aWNlIG1lbW9yeSwgSE1NIGFz
c3VtZXMgdGhhdCB0aGVyZSBpcyBubyByZWFsIHJlc291cmNlCi0gKiB0aGF0IHJlc2VydmVzIGEg
cmFuZ2UgaW4gdGhlIHBoeXNpY2FsIGFkZHJlc3Mgc3BhY2UgKHRoaXMgaXMgaW50ZW5kZWQgdG8g
YmUKLSAqIHVzZSBieSB1bmFkZHJlc3NhYmxlIGRldmljZSBtZW1vcnkpLiBJdCB3aWxsIHJlc2Vy
dmUgYSBwaHlzaWNhbCByYW5nZSBiaWcKLSAqIGVub3VnaCBhbmQgYWxsb2NhdGUgc3RydWN0IHBh
Z2UgZm9yIGl0LgotICoKLSAqIFRoZSBkZXZpY2UgZHJpdmVyIGNhbiB3cmFwIHRoZSBobW1fZGV2
bWVtIHN0cnVjdCBpbnNpZGUgYSBwcml2YXRlIGRldmljZQotICogZHJpdmVyIHN0cnVjdC4KLSAq
Lwotc3RydWN0IGhtbV9kZXZtZW0gKmhtbV9kZXZtZW1fYWRkKGNvbnN0IHN0cnVjdCBobW1fZGV2
bWVtX29wcyAqb3BzLAotCQkJCSAgc3RydWN0IGRldmljZSAqZGV2aWNlLAotCQkJCSAgdW5zaWdu
ZWQgbG9uZyBzaXplKTsKLQogLyoKICAqIGhtbV9kZXZtZW1fcGFnZV9zZXRfZHJ2ZGF0YSAtIHNl
dCBwZXItcGFnZSBkcml2ZXIgZGF0YSBmaWVsZAogICoKZGlmZiAtLWdpdCBhL21tL2htbS5jIGIv
bW0vaG1tLmMKaW5kZXggYzE1MjgzZjliYmYwLi41YjJlOWJiNjA2M2EgMTAwNjQ0Ci0tLSBhL21t
L2htbS5jCisrKyBiL21tL2htbS5jCkBAIC0xMjkwLDExOCArMTI5MCwzIEBAIGxvbmcgaG1tX3Jh
bmdlX2RtYV91bm1hcChzdHJ1Y3QgaG1tX3JhbmdlICpyYW5nZSwKIH0KIEVYUE9SVF9TWU1CT0wo
aG1tX3JhbmdlX2RtYV91bm1hcCk7CiAjZW5kaWYgLyogSVNfRU5BQkxFRChDT05GSUdfSE1NX01J
UlJPUikgKi8KLQotCi0jaWYgSVNfRU5BQkxFRChDT05GSUdfREVWSUNFX1BSSVZBVEUpIHx8ICBJ
U19FTkFCTEVEKENPTkZJR19ERVZJQ0VfUFVCTElDKQotc3RhdGljIHZvaWQgaG1tX2Rldm1lbV9y
ZWZfcmVsZWFzZShzdHJ1Y3QgcGVyY3B1X3JlZiAqcmVmKQotewotCXN0cnVjdCBobW1fZGV2bWVt
ICpkZXZtZW07Ci0KLQlkZXZtZW0gPSBjb250YWluZXJfb2YocmVmLCBzdHJ1Y3QgaG1tX2Rldm1l
bSwgcmVmKTsKLQljb21wbGV0ZSgmZGV2bWVtLT5jb21wbGV0aW9uKTsKLX0KLQotc3RhdGljIHZv
aWQgaG1tX2Rldm1lbV9yZWZfZXhpdCh2b2lkICpkYXRhKQotewotCXN0cnVjdCBwZXJjcHVfcmVm
ICpyZWYgPSBkYXRhOwotCXN0cnVjdCBobW1fZGV2bWVtICpkZXZtZW07Ci0KLQlkZXZtZW0gPSBj
b250YWluZXJfb2YocmVmLCBzdHJ1Y3QgaG1tX2Rldm1lbSwgcmVmKTsKLQl3YWl0X2Zvcl9jb21w
bGV0aW9uKCZkZXZtZW0tPmNvbXBsZXRpb24pOwotCXBlcmNwdV9yZWZfZXhpdChyZWYpOwotfQot
Ci1zdGF0aWMgdm9pZCBobW1fZGV2bWVtX3JlZl9raWxsKHN0cnVjdCBkZXZfcGFnZW1hcCAqcGdt
YXApCi17Ci0JcGVyY3B1X3JlZl9raWxsKHBnbWFwLT5yZWYpOwotfQotCi1zdGF0aWMgdm1fZmF1
bHRfdCBobW1fZGV2bWVtX21pZ3JhdGUoc3RydWN0IHZtX2ZhdWx0ICp2bWYpCi17Ci0Jc3RydWN0
IGhtbV9kZXZtZW0gKmRldm1lbSA9Ci0JCWNvbnRhaW5lcl9vZih2bWYtPnBhZ2UtPnBnbWFwLCBz
dHJ1Y3QgaG1tX2Rldm1lbSwgcGFnZW1hcCk7Ci0KLQlyZXR1cm4gZGV2bWVtLT5vcHMtPmZhdWx0
KGRldm1lbSwgdm1mLT52bWEsIHZtZi0+YWRkcmVzcywgdm1mLT5wYWdlLAotCQkJdm1mLT5mbGFn
cywgdm1mLT5wbWQpOwotfQotCi1zdGF0aWMgdm9pZCBobW1fZGV2bWVtX2ZyZWUoc3RydWN0IHBh
Z2UgKnBhZ2UpCi17Ci0Jc3RydWN0IGhtbV9kZXZtZW0gKmRldm1lbSA9Ci0JCWNvbnRhaW5lcl9v
ZihwYWdlLT5wZ21hcCwgc3RydWN0IGhtbV9kZXZtZW0sIHBhZ2VtYXApOwotCi0JZGV2bWVtLT5v
cHMtPmZyZWUoZGV2bWVtLCBwYWdlKTsKLX0KLQotc3RhdGljIGNvbnN0IHN0cnVjdCBkZXZfcGFn
ZW1hcF9vcHMgaG1tX3BhZ2VtYXBfb3BzID0gewotCS5wYWdlX2ZyZWUJCT0gaG1tX2Rldm1lbV9m
cmVlLAotCS5raWxsCQkJPSBobW1fZGV2bWVtX3JlZl9raWxsLAotCS5taWdyYXRlCQk9IGhtbV9k
ZXZtZW1fbWlncmF0ZSwKLX07Ci0KLS8qCi0gKiBobW1fZGV2bWVtX2FkZCgpIC0gaG90cGx1ZyBa
T05FX0RFVklDRSBtZW1vcnkgZm9yIGRldmljZSBtZW1vcnkKLSAqCi0gKiBAb3BzOiBtZW1vcnkg
ZXZlbnQgZGV2aWNlIGRyaXZlciBjYWxsYmFjayAoc2VlIHN0cnVjdCBobW1fZGV2bWVtX29wcykK
LSAqIEBkZXZpY2U6IGRldmljZSBzdHJ1Y3QgdG8gYmluZCB0aGUgcmVzb3VyY2UgdG9vCi0gKiBA
c2l6ZTogc2l6ZSBpbiBieXRlcyBvZiB0aGUgZGV2aWNlIG1lbW9yeSB0byBhZGQKLSAqIFJldHVy
bjogcG9pbnRlciB0byBuZXcgaG1tX2Rldm1lbSBzdHJ1Y3QgRVJSX1BUUiBvdGhlcndpc2UKLSAq
Ci0gKiBUaGlzIGZ1bmN0aW9uIGZpcnN0IGZpbmRzIGFuIGVtcHR5IHJhbmdlIG9mIHBoeXNpY2Fs
IGFkZHJlc3MgYmlnIGVub3VnaCB0bwotICogY29udGFpbiB0aGUgbmV3IHJlc291cmNlLCBhbmQg
dGhlbiBob3RwbHVncyBpdCBhcyBaT05FX0RFVklDRSBtZW1vcnksIHdoaWNoCi0gKiBpbiB0dXJu
IGFsbG9jYXRlcyBzdHJ1Y3QgcGFnZXMuIEl0IGRvZXMgbm90IGRvIGFueXRoaW5nIGJleW9uZCB0
aGF0OyBhbGwKLSAqIGV2ZW50cyBhZmZlY3RpbmcgdGhlIG1lbW9yeSB3aWxsIGdvIHRocm91Z2gg
dGhlIHZhcmlvdXMgY2FsbGJhY2tzIHByb3ZpZGVkCi0gKiBieSBobW1fZGV2bWVtX29wcyBzdHJ1
Y3QuCi0gKgotICogRGV2aWNlIGRyaXZlciBzaG91bGQgY2FsbCB0aGlzIGZ1bmN0aW9uIGR1cmlu
ZyBkZXZpY2UgaW5pdGlhbGl6YXRpb24gYW5kCi0gKiBpcyB0aGVuIHJlc3BvbnNpYmxlIG9mIG1l
bW9yeSBtYW5hZ2VtZW50LiBITU0gb25seSBwcm92aWRlcyBoZWxwZXJzLgotICovCi1zdHJ1Y3Qg
aG1tX2Rldm1lbSAqaG1tX2Rldm1lbV9hZGQoY29uc3Qgc3RydWN0IGhtbV9kZXZtZW1fb3BzICpv
cHMsCi0JCQkJICBzdHJ1Y3QgZGV2aWNlICpkZXZpY2UsCi0JCQkJICB1bnNpZ25lZCBsb25nIHNp
emUpCi17Ci0Jc3RydWN0IGhtbV9kZXZtZW0gKmRldm1lbTsKLQl2b2lkICpyZXN1bHQ7Ci0JaW50
IHJldDsKLQotCWRldm1lbSA9IGRldm1fa3phbGxvYyhkZXZpY2UsIHNpemVvZigqZGV2bWVtKSwg
R0ZQX0tFUk5FTCk7Ci0JaWYgKCFkZXZtZW0pCi0JCXJldHVybiBFUlJfUFRSKC1FTk9NRU0pOwot
Ci0JaW5pdF9jb21wbGV0aW9uKCZkZXZtZW0tPmNvbXBsZXRpb24pOwotCWRldm1lbS0+cGZuX2Zp
cnN0ID0gLTFVTDsKLQlkZXZtZW0tPnBmbl9sYXN0ID0gLTFVTDsKLQlkZXZtZW0tPnJlc291cmNl
ID0gTlVMTDsKLQlkZXZtZW0tPmRldmljZSA9IGRldmljZTsKLQlkZXZtZW0tPm9wcyA9IG9wczsK
LQotCXJldCA9IHBlcmNwdV9yZWZfaW5pdCgmZGV2bWVtLT5yZWYsICZobW1fZGV2bWVtX3JlZl9y
ZWxlYXNlLAotCQkJICAgICAgMCwgR0ZQX0tFUk5FTCk7Ci0JaWYgKHJldCkKLQkJcmV0dXJuIEVS
Ul9QVFIocmV0KTsKLQotCXJldCA9IGRldm1fYWRkX2FjdGlvbl9vcl9yZXNldChkZXZpY2UsIGht
bV9kZXZtZW1fcmVmX2V4aXQsICZkZXZtZW0tPnJlZik7Ci0JaWYgKHJldCkKLQkJcmV0dXJuIEVS
Ul9QVFIocmV0KTsKLQotCWRldm1lbS0+cmVzb3VyY2UgPSBkZXZtX3JlcXVlc3RfZnJlZV9tZW1f
cmVnaW9uKGRldmljZSwgJmlvbWVtX3Jlc291cmNlLAotCQkJc2l6ZSk7Ci0JaWYgKElTX0VSUihk
ZXZtZW0tPnJlc291cmNlKSkKLQkJcmV0dXJuIEVSUl9DQVNUKGRldm1lbS0+cmVzb3VyY2UpOwot
CWRldm1lbS0+cGZuX2ZpcnN0ID0gZGV2bWVtLT5yZXNvdXJjZS0+c3RhcnQgPj4gUEFHRV9TSElG
VDsKLQlkZXZtZW0tPnBmbl9sYXN0ID0gZGV2bWVtLT5wZm5fZmlyc3QgKwotCQkJICAgKHJlc291
cmNlX3NpemUoZGV2bWVtLT5yZXNvdXJjZSkgPj4gUEFHRV9TSElGVCk7Ci0KLQlkZXZtZW0tPnBh
Z2VtYXAudHlwZSA9IE1FTU9SWV9ERVZJQ0VfUFJJVkFURTsKLQlkZXZtZW0tPnBhZ2VtYXAucmVz
ID0gKmRldm1lbS0+cmVzb3VyY2U7Ci0JZGV2bWVtLT5wYWdlbWFwLm9wcyA9ICZobW1fcGFnZW1h
cF9vcHM7Ci0JZGV2bWVtLT5wYWdlbWFwLmFsdG1hcF92YWxpZCA9IGZhbHNlOwotCWRldm1lbS0+
cGFnZW1hcC5yZWYgPSAmZGV2bWVtLT5yZWY7Ci0KLQlyZXN1bHQgPSBkZXZtX21lbXJlbWFwX3Bh
Z2VzKGRldm1lbS0+ZGV2aWNlLCAmZGV2bWVtLT5wYWdlbWFwKTsKLQlpZiAoSVNfRVJSKHJlc3Vs
dCkpCi0JCXJldHVybiByZXN1bHQ7Ci0JcmV0dXJuIGRldm1lbTsKLX0KLUVYUE9SVF9TWU1CT0xf
R1BMKGhtbV9kZXZtZW1fYWRkKTsKLSNlbmRpZiAvKiBDT05GSUdfREVWSUNFX1BSSVZBVEUgfHwg
Q09ORklHX0RFVklDRV9QVUJMSUMgKi8KLS0gCjIuMjAuMQoKX19fX19fX19fX19fX19fX19fX19f
X19fX19fX19fX19fX19fX19fX19fX19fX18KTm91dmVhdSBtYWlsaW5nIGxpc3QKTm91dmVhdUBs
aXN0cy5mcmVlZGVza3RvcC5vcmcKaHR0cHM6Ly9saXN0cy5mcmVlZGVza3RvcC5vcmcvbWFpbG1h
bi9saXN0aW5mby9ub3V2ZWF1
